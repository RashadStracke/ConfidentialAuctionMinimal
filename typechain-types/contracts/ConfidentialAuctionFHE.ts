/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ConfidentialAuctionFHEInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "auctionBids"
      | "auctions"
      | "createAuction"
      | "endAuction"
      | "getAuctionBasicInfo"
      | "getAuctionStatus"
      | "getBidCount"
      | "getHighestBidder"
      | "getTotalCounts"
      | "getUserAuctions"
      | "hasUserBid"
      | "hasUserBidOnAuction"
      | "nextAuctionId"
      | "placeBid"
      | "totalAuctions"
      | "userAuctions"
      | "withdrawFunds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AuctionCreated" | "BidPlaced"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "auctionBids",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionBasicInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBidCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHighestBidder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalCounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAuctions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasUserBid",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasUserBidOnAuction",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextAuctionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "placeBid",
    values: [BigNumberish, boolean, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAuctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userAuctions",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "auctionBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endAuction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionBasicInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBidCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHighestBidder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasUserBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasUserBidOnAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextAuctionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
}

export namespace AuctionCreatedEvent {
  export type InputTuple = [
    auctionId: BigNumberish,
    title: string,
    category: string,
    minimumBid: BigNumberish,
    creator: AddressLike,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    auctionId: bigint,
    title: string,
    category: string,
    minimumBid: bigint,
    creator: string,
    endTime: bigint
  ];
  export interface OutputObject {
    auctionId: bigint;
    title: string;
    category: string;
    minimumBid: bigint;
    creator: string;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BidPlacedEvent {
  export type InputTuple = [
    auctionId: BigNumberish,
    bidder: AddressLike,
    comments: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    auctionId: bigint,
    bidder: string,
    comments: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    auctionId: bigint;
    bidder: string;
    comments: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ConfidentialAuctionFHE extends BaseContract {
  connect(runner?: ContractRunner | null): ConfidentialAuctionFHE;
  waitForDeployment(): Promise<this>;

  interface: ConfidentialAuctionFHEInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  auctionBids: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, string, string, string, bigint, boolean] & {
        bidder: string;
        amount: string;
        isHighBid: string;
        comments: string;
        timestamp: bigint;
        isRevealed: boolean;
      }
    ],
    "view"
  >;

  auctions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        string,
        bigint,
        boolean,
        bigint,
        string,
        string,
        bigint,
        string
      ] & {
        id: bigint;
        title: string;
        description: string;
        category: string;
        minimumBid: bigint;
        creator: string;
        timestamp: bigint;
        isActive: boolean;
        endTime: bigint;
        highestBidAmount: string;
        highestBidder: string;
        bidCount: bigint;
        hasHighBid: string;
      }
    ],
    "view"
  >;

  createAuction: TypedContractMethod<
    [
      _title: string,
      _description: string,
      _category: string,
      _minimumBid: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  endAuction: TypedContractMethod<
    [_auctionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAuctionBasicInfo: TypedContractMethod<
    [_auctionId: BigNumberish],
    [
      [string, string, string, bigint, string] & {
        title: string;
        description: string;
        category: string;
        minimumBid: bigint;
        creator: string;
      }
    ],
    "view"
  >;

  getAuctionStatus: TypedContractMethod<
    [_auctionId: BigNumberish],
    [
      [bigint, boolean, bigint, bigint] & {
        timestamp: bigint;
        isActive: boolean;
        endTime: bigint;
        bidCount: bigint;
      }
    ],
    "view"
  >;

  getBidCount: TypedContractMethod<
    [_auctionId: BigNumberish],
    [bigint],
    "view"
  >;

  getHighestBidder: TypedContractMethod<
    [_auctionId: BigNumberish],
    [string],
    "view"
  >;

  getTotalCounts: TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        totalAuctionCount: bigint;
        activeAuctionCount: bigint;
      }
    ],
    "view"
  >;

  getUserAuctions: TypedContractMethod<
    [_user: AddressLike],
    [bigint[]],
    "view"
  >;

  hasUserBid: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  hasUserBidOnAuction: TypedContractMethod<
    [_user: AddressLike, _auctionId: BigNumberish],
    [boolean],
    "view"
  >;

  nextAuctionId: TypedContractMethod<[], [bigint], "view">;

  placeBid: TypedContractMethod<
    [
      _auctionId: BigNumberish,
      _isHighBid: boolean,
      _bidAmount: BigNumberish,
      _comments: string
    ],
    [void],
    "payable"
  >;

  totalAuctions: TypedContractMethod<[], [bigint], "view">;

  userAuctions: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  withdrawFunds: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "auctionBids"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, string, string, string, bigint, boolean] & {
        bidder: string;
        amount: string;
        isHighBid: string;
        comments: string;
        timestamp: bigint;
        isRevealed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "auctions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        string,
        bigint,
        boolean,
        bigint,
        string,
        string,
        bigint,
        string
      ] & {
        id: bigint;
        title: string;
        description: string;
        category: string;
        minimumBid: bigint;
        creator: string;
        timestamp: bigint;
        isActive: boolean;
        endTime: bigint;
        highestBidAmount: string;
        highestBidder: string;
        bidCount: bigint;
        hasHighBid: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createAuction"
  ): TypedContractMethod<
    [
      _title: string,
      _description: string,
      _category: string,
      _minimumBid: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "endAuction"
  ): TypedContractMethod<[_auctionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAuctionBasicInfo"
  ): TypedContractMethod<
    [_auctionId: BigNumberish],
    [
      [string, string, string, bigint, string] & {
        title: string;
        description: string;
        category: string;
        minimumBid: bigint;
        creator: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAuctionStatus"
  ): TypedContractMethod<
    [_auctionId: BigNumberish],
    [
      [bigint, boolean, bigint, bigint] & {
        timestamp: bigint;
        isActive: boolean;
        endTime: bigint;
        bidCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBidCount"
  ): TypedContractMethod<[_auctionId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getHighestBidder"
  ): TypedContractMethod<[_auctionId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getTotalCounts"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        totalAuctionCount: bigint;
        activeAuctionCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserAuctions"
  ): TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "hasUserBid"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasUserBidOnAuction"
  ): TypedContractMethod<
    [_user: AddressLike, _auctionId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextAuctionId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "placeBid"
  ): TypedContractMethod<
    [
      _auctionId: BigNumberish,
      _isHighBid: boolean,
      _bidAmount: BigNumberish,
      _comments: string
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "totalAuctions"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "userAuctions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AuctionCreated"
  ): TypedContractEvent<
    AuctionCreatedEvent.InputTuple,
    AuctionCreatedEvent.OutputTuple,
    AuctionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "BidPlaced"
  ): TypedContractEvent<
    BidPlacedEvent.InputTuple,
    BidPlacedEvent.OutputTuple,
    BidPlacedEvent.OutputObject
  >;

  filters: {
    "AuctionCreated(uint256,string,string,uint256,address,uint256)": TypedContractEvent<
      AuctionCreatedEvent.InputTuple,
      AuctionCreatedEvent.OutputTuple,
      AuctionCreatedEvent.OutputObject
    >;
    AuctionCreated: TypedContractEvent<
      AuctionCreatedEvent.InputTuple,
      AuctionCreatedEvent.OutputTuple,
      AuctionCreatedEvent.OutputObject
    >;

    "BidPlaced(uint256,address,string,uint256)": TypedContractEvent<
      BidPlacedEvent.InputTuple,
      BidPlacedEvent.OutputTuple,
      BidPlacedEvent.OutputObject
    >;
    BidPlaced: TypedContractEvent<
      BidPlacedEvent.InputTuple,
      BidPlacedEvent.OutputTuple,
      BidPlacedEvent.OutputObject
    >;
  };
}
