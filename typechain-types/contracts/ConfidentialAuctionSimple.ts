/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ConfidentialAuctionSimple {
  export type AuctionStruct = {
    id: BigNumberish;
    title: string;
    description: string;
    category: string;
    minimumBid: BigNumberish;
    creator: AddressLike;
    timestamp: BigNumberish;
    isActive: boolean;
    endTime: BigNumberish;
    highestBidAmount: BigNumberish;
    highestBidder: AddressLike;
    bidCount: BigNumberish;
  };

  export type AuctionStructOutput = [
    id: bigint,
    title: string,
    description: string,
    category: string,
    minimumBid: bigint,
    creator: string,
    timestamp: bigint,
    isActive: boolean,
    endTime: bigint,
    highestBidAmount: bigint,
    highestBidder: string,
    bidCount: bigint
  ] & {
    id: bigint;
    title: string;
    description: string;
    category: string;
    minimumBid: bigint;
    creator: string;
    timestamp: bigint;
    isActive: boolean;
    endTime: bigint;
    highestBidAmount: bigint;
    highestBidder: string;
    bidCount: bigint;
  };
}

export interface ConfidentialAuctionSimpleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "auctionBids"
      | "auctions"
      | "createAuction"
      | "endAuction"
      | "getActiveAuctions"
      | "getAuction"
      | "getAuctionBidCount"
      | "getTotalCounts"
      | "getUserAuctions"
      | "hasPlacedBid"
      | "hasUserBid"
      | "nextAuctionId"
      | "placeBid"
      | "totalAuctions"
      | "userAuctions"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AuctionCreated" | "AuctionEnded" | "BidPlaced"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "auctionBids",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveAuctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionBidCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalCounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAuctions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPlacedBid",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasUserBid",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextAuctionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "placeBid",
    values: [BigNumberish, boolean, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAuctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userAuctions",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "auctionBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endAuction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActiveAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAuction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionBidCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPlacedBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasUserBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextAuctionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userAuctions",
    data: BytesLike
  ): Result;
}

export namespace AuctionCreatedEvent {
  export type InputTuple = [
    auctionId: BigNumberish,
    title: string,
    category: string,
    minimumBid: BigNumberish,
    creator: AddressLike,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    auctionId: bigint,
    title: string,
    category: string,
    minimumBid: bigint,
    creator: string,
    endTime: bigint
  ];
  export interface OutputObject {
    auctionId: bigint;
    title: string;
    category: string;
    minimumBid: bigint;
    creator: string;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuctionEndedEvent {
  export type InputTuple = [
    auctionId: BigNumberish,
    winner: AddressLike,
    winningBid: BigNumberish
  ];
  export type OutputTuple = [
    auctionId: bigint,
    winner: string,
    winningBid: bigint
  ];
  export interface OutputObject {
    auctionId: bigint;
    winner: string;
    winningBid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BidPlacedEvent {
  export type InputTuple = [
    auctionId: BigNumberish,
    bidder: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    auctionId: bigint,
    bidder: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    auctionId: bigint;
    bidder: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ConfidentialAuctionSimple extends BaseContract {
  connect(runner?: ContractRunner | null): ConfidentialAuctionSimple;
  waitForDeployment(): Promise<this>;

  interface: ConfidentialAuctionSimpleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  auctionBids: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, bigint, boolean, string, bigint, boolean] & {
        bidder: string;
        amount: bigint;
        isHighBid: boolean;
        comments: string;
        timestamp: bigint;
        isRevealed: boolean;
      }
    ],
    "view"
  >;

  auctions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        string,
        bigint,
        boolean,
        bigint,
        bigint,
        string,
        bigint
      ] & {
        id: bigint;
        title: string;
        description: string;
        category: string;
        minimumBid: bigint;
        creator: string;
        timestamp: bigint;
        isActive: boolean;
        endTime: bigint;
        highestBidAmount: bigint;
        highestBidder: string;
        bidCount: bigint;
      }
    ],
    "view"
  >;

  createAuction: TypedContractMethod<
    [
      _title: string,
      _description: string,
      _category: string,
      _minimumBid: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  endAuction: TypedContractMethod<
    [_auctionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getActiveAuctions: TypedContractMethod<
    [],
    [ConfidentialAuctionSimple.AuctionStructOutput[]],
    "view"
  >;

  getAuction: TypedContractMethod<
    [_auctionId: BigNumberish],
    [ConfidentialAuctionSimple.AuctionStructOutput],
    "view"
  >;

  getAuctionBidCount: TypedContractMethod<
    [_auctionId: BigNumberish],
    [bigint],
    "view"
  >;

  getTotalCounts: TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        totalAuctionCount: bigint;
        activeAuctionCount: bigint;
      }
    ],
    "view"
  >;

  getUserAuctions: TypedContractMethod<
    [_user: AddressLike],
    [bigint[]],
    "view"
  >;

  hasPlacedBid: TypedContractMethod<
    [_user: AddressLike, _auctionId: BigNumberish],
    [boolean],
    "view"
  >;

  hasUserBid: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  nextAuctionId: TypedContractMethod<[], [bigint], "view">;

  placeBid: TypedContractMethod<
    [
      _auctionId: BigNumberish,
      _isHighBid: boolean,
      _bidAmount: BigNumberish,
      _comments: string
    ],
    [void],
    "payable"
  >;

  totalAuctions: TypedContractMethod<[], [bigint], "view">;

  userAuctions: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "auctionBids"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, bigint, boolean, string, bigint, boolean] & {
        bidder: string;
        amount: bigint;
        isHighBid: boolean;
        comments: string;
        timestamp: bigint;
        isRevealed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "auctions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        string,
        bigint,
        boolean,
        bigint,
        bigint,
        string,
        bigint
      ] & {
        id: bigint;
        title: string;
        description: string;
        category: string;
        minimumBid: bigint;
        creator: string;
        timestamp: bigint;
        isActive: boolean;
        endTime: bigint;
        highestBidAmount: bigint;
        highestBidder: string;
        bidCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createAuction"
  ): TypedContractMethod<
    [
      _title: string,
      _description: string,
      _category: string,
      _minimumBid: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "endAuction"
  ): TypedContractMethod<[_auctionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActiveAuctions"
  ): TypedContractMethod<
    [],
    [ConfidentialAuctionSimple.AuctionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAuction"
  ): TypedContractMethod<
    [_auctionId: BigNumberish],
    [ConfidentialAuctionSimple.AuctionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAuctionBidCount"
  ): TypedContractMethod<[_auctionId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalCounts"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        totalAuctionCount: bigint;
        activeAuctionCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserAuctions"
  ): TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "hasPlacedBid"
  ): TypedContractMethod<
    [_user: AddressLike, _auctionId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasUserBid"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextAuctionId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "placeBid"
  ): TypedContractMethod<
    [
      _auctionId: BigNumberish,
      _isHighBid: boolean,
      _bidAmount: BigNumberish,
      _comments: string
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "totalAuctions"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "userAuctions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "AuctionCreated"
  ): TypedContractEvent<
    AuctionCreatedEvent.InputTuple,
    AuctionCreatedEvent.OutputTuple,
    AuctionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "AuctionEnded"
  ): TypedContractEvent<
    AuctionEndedEvent.InputTuple,
    AuctionEndedEvent.OutputTuple,
    AuctionEndedEvent.OutputObject
  >;
  getEvent(
    key: "BidPlaced"
  ): TypedContractEvent<
    BidPlacedEvent.InputTuple,
    BidPlacedEvent.OutputTuple,
    BidPlacedEvent.OutputObject
  >;

  filters: {
    "AuctionCreated(uint256,string,string,uint256,address,uint256)": TypedContractEvent<
      AuctionCreatedEvent.InputTuple,
      AuctionCreatedEvent.OutputTuple,
      AuctionCreatedEvent.OutputObject
    >;
    AuctionCreated: TypedContractEvent<
      AuctionCreatedEvent.InputTuple,
      AuctionCreatedEvent.OutputTuple,
      AuctionCreatedEvent.OutputObject
    >;

    "AuctionEnded(uint256,address,uint256)": TypedContractEvent<
      AuctionEndedEvent.InputTuple,
      AuctionEndedEvent.OutputTuple,
      AuctionEndedEvent.OutputObject
    >;
    AuctionEnded: TypedContractEvent<
      AuctionEndedEvent.InputTuple,
      AuctionEndedEvent.OutputTuple,
      AuctionEndedEvent.OutputObject
    >;

    "BidPlaced(uint256,address,uint256)": TypedContractEvent<
      BidPlacedEvent.InputTuple,
      BidPlacedEvent.OutputTuple,
      BidPlacedEvent.OutputObject
    >;
    BidPlaced: TypedContractEvent<
      BidPlacedEvent.InputTuple,
      BidPlacedEvent.OutputTuple,
      BidPlacedEvent.OutputObject
    >;
  };
}
